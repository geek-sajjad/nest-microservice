/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export namespace task {
    export interface TaskService {
        create(
            data: CreateTaskRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<Task>;
        findOne(
            data: FindOneRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<Task>;
        findOneWithParent(
            data: FindOneRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TaskWithParent>;
        findOneWithChild(
            data: FindOneRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<TaskWithChild>;
        findAll(
            data: FindAllRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<FindAllResponse>;
        updateOne(
            data: UpdateOneRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<Task>;
        deleteOne(
            data: DeleteOneRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<Task>;
    }
    export interface CreateTaskRequest {
        title?: string;
        description?: string;
        parentId?: string;
    }
    export interface FindOneRequest {
        id?: string;
    }
    export interface DeleteOneRequest {
        id?: string;
    }
    // tslint:disable-next-line:no-empty-interface
    export interface Empty {
    }
    export interface FindAllRequest {
        findAllRequestQueryParam?: task.FindAllRequestQueryParam;
    }
    export interface FindAllRequestQueryParam {
        page?: string;
        perPage?: string;
        sort?: string;
    }
    export interface UpdateOneRequest {
        id?: string;
        title?: string;
        description?: string;
        parentId?: string;
    }
    export interface Task {
        id?: string;
        title?: string;
        description?: string;
    }
    export interface FindAllResponse {
        totalPage?: number;
        totalData?: number;
        currentPage?: number;
        perPage?: number;
        availableSort?: string[];
        data?: task.Task[];
    }
    export interface TaskWithParent {
        id?: string;
        title?: string;
        description?: string;
        parent?: task.Task;
    }
    export interface TaskWithChild {
        id?: string;
        title?: string;
        description?: string;
        child?: task.Task;
    }
}

